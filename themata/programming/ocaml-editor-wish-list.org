#+TITLE: Ocaml Editor Wish List
* Type-driven Case Generation

Ala Agda.

Given

#+begin_src tuareg
type t = A | B | C of int
#+end_src

We should be able to

#+begin_src tuareg
let f : t -> int = function <tab>
#+end_src

to have generated the snippet template

#+begin_src tuareg
let f : t -> int = function
  | A   -> __
  | B   -> __
  | C x -> __ x
#+end_src

where =__=  and =x= are fields that can be navigated with =<tab>=, and filled in
by the user.
* Structural transformation

E.g., given

#+begin_src ocaml
if x then
  exp1
else
  exp2
#+end_src

a single command should be able to swap the expressions in the branches and
negate the conditional.
* Interactive function composition search

Write

#+BEGIN_SRC ocaml
let foo : t -> q = ...
#+END_SRC


And get an interactive prompt presenting a navigable tree of function chains
from =t= to =q=.

I want proof search over defined functions, not over the implementations of the
functions.
