#+TITLE: Types

Notes on types, largely, but not exclusively, from the perspective of
type theory.

* What are Types?

** In "Type Theory"

#+BEGIN_QUOTE
In the "types as predicates" variant of the "types as sets" approach, types are
taken to be predicates, which therefore denote sets (or some variant thereof,
such as domains). However, many advocates of this view are more proof
theoretically inclined, and hence might resist such denotations. Perhaps the
best known work along this line is Martin-Löf's "type theory", which also
provides dependent types, as implemented in Pebble and other languages. (Note
that "type theory" is not a general theory of types, but rather a specific
intuitionistic logic which provides one specific notion of type).

(cite:Programming91typesas)
#+END_QUOTE

What is the theory of types that is presupposed by the λ-calculus based type
theories?

*** Genealogy
**** re: The Prehistory of Types
#+BEGIN_QUOTE
In all subsumptions of an object under a concept the representations of the
former must be *homogeneous* [Gleichartig] with the latter, i.e., the concept
must contain that which is represented in the object that is to be subsumed
under it, for that is just what is meant by the expression "an object is
contained under a concept".

(cite:kant98_critiq, A137/B176)
#+END_QUOTE

**** re: The History of Types
Martin-Löf's, in his "An intuitionistic theory of types", explicitly traces his
concept of type back to Russel:

#+BEGIN_QUOTE
Every mathematical object is of a certain kind or /type/. Better, a mathematical
object is always given together with its type, that is, it is not just an
object, it is an object of a certain type. This may be regarded as a simpler and
at the same time more general formulation of Russel's 1903 /doctrine of types/,
according to which a type is the range of significance of a propositional
function, because in the theory that I am about to describe every propositional
function will indeed have a type as its domain.

(cite:martin1998intuitionistic)
#+END_QUOTE

Russell's theory of types puts the concept of a propositional /function/ *under*
the concept of a general proposition (in the sense of conceptually prior to).

#+BEGIN_QUOTE
Every proposition containing all asserts that some propositional function is
always true; and this means that all values of the said function are true
#+END_QUOTE

Then the meaning of quantification is subordinate to the range of /valid/ values
of a function.

#+BEGIN_QUOTE
Hence we can speak of all of a collection when and only when the collection
forms part or the whole of the range of significance of some propositional
function, the range of significance being defined as the collection of those
arguments for which the function in question is significant, i. e., has a value.
(cite:10.2307/2369948)
#+END_QUOTE

Hence, "a type is defined as the range of significance of a propositional
function, i.e., as the collection of arguments for which the said function has
values" (cite:10.2307/2369948).

But what determines the /validity/ of this range? Russell names it "logical
homogeneity":

#+BEGIN_QUOTE
What is essential, as appears from the above discussion, is not finitude, but
what may be called logical homogeneity. This property is to belong to any
collection whose terms are all contained within the range of significance of
some one function. It would always be obvious at a glanice whether a collection
possessed this property or not, if it were not for the concealed ambiguity in
common logical terms such as true and false, which gives an appearance of being
a single function to what is really a conglomeration of many functions with
different ranges of significance.

(cite:10.2307/2369948)
#+END_QUOTE

/Logical homogeneity/ is a property of /collections of terms/. A collection of
terms has this property when all the terms are "contained within the range of
significance of some one function". A "type" is then a special case of a
logically homogenius collection of terms: a logically homogenius collection of
terms whose characteristic function is /propositional/ is a /type/.

Of course, this all leaves undecided the really essential and most interesting
question: How is the homogeneity of such collections determined and enforced? By
virtue of what can we say that the terms in such a collection /belong/ together?
And, once we've determined that belonging together, how do we enforce this?

*** Enforcement: types as marks of belonging-together

The types of the typed λ-calculi are /marks/, or /indexes/, used to enforce a
sense of appropriateness that follows from presumptions of /belonging together/.

This is indeed how types function in the calculi when represented ala Church.
The types mark the λ-terms themselves, being inscribed into each head. These
marks serve as a prophylactic protecting against unwanted applications. This
usage echos the etymon of 'type':

#+BEGIN_QUOTE
late 15c., "symbol, emblem," from Latin /typus/ "figure, image, form, kind,"
from Greek /typos/ "a blow, dent, impression, mark, effect of a blow; figure in
relief, image, statue; anything wrought of metal or stone; general form,
character; outline, sketch," from root of /typtein/ "to strike, beat," from PIE
/*tup-/, variant of root /*(s)teu-/ (1) "to push, stick, knock, beat"
([[https://www.etymonline.com/search?q=type][etymonline]])
#+END_QUOTE

*** Justification:

What justifies such enforcement?

** Types as Theories

#+BEGIN_QUOTE
The essential insight of the "types as algebras" notion is that the /operations/
associated with data are at least as important as the values. Thus, the this
approach generalized from [types as] sets to /algebras/, which are just sets
with some given operations.

(cite:Programming91typesas)
#+END_QUOTE

Let's lean on the proof-theory side of types-as-propositions and recall (what I
believe to be) a key insight of Gentzen's approach:

#+BEGIN_QUOTE
To every logical symbol ... belongs precisely one inference figure which
'introduces' the symbol - as the terminal symbol of a formula - and one which
'eliminates' it. ... The introductions represent, as it were, the 'definitions'
of the symbols concerned, and the eliminations are no more than, in the final
analysis, than the consequences of these definitions. This fact may be expressed
as follows: In eliminating a symbol, we may use the formula with whose terminal
symbol we are dealing only 'in the sense afforded by the introduction of that
symbol'.

cite:m.69_gerhar_gentz_german
#+END_QUOTE

That is, the meaning of the logical connectives (i.e., the correspondents of the
principle types in the various type theories) is given by their introduction and
elimination rules. From the Curry perspective on typing, I think we can say that
the intro/elim rules are (partial) operations on the sets of derivations in the
lambda calculus (since a set of derivations is a set of programs, which is a set
of proofs, which is the meaning of a proposition according to the perspective of
proof-theoretic semantics). If this is correct, I think we have a perspective
from which we can say that the meaning of the types in our systems are indeed
given by the operations belonging to each type (i.e., the particular sets of
operations which carve out patterns of permitted connections within the sets of
derivations of the lambda calculus).

* TODO Notes to process

** Structuralist view

Girard advances an existentialist view of logic (and type theory, as a
sub-discipline):

#+BEGIN_QUOTE
*Existence.* One can instead contend that [the existence of] objects are
 anterior to their type, seen as an essence. This is the viewpoint of
 /subtyping/, this is also the viewpoint of ludics: an object may have several
 types, be representative of several essences. Their /locativity/ becomes
 essential.

 (cite:girard11)
#+END_QUOTE

I suspect that, when cleansed of it's humanist and historicist distortions,
existentialism resolves into a radical structuralism.

I further suspect...

A type system is a functor from types to terms. Parametric types give natural
transformations over functors to simply typed terms. There are also other
important ways of tracing natural transformations between sets of typeable
terms. Subtyping lets us establish and specify some of these and, in fact,
Girard presents polymorphism as a subspecies of subtyping:

#+BEGIN_QUOTE
Polymorphism is the observation that the same λ-term can admit several types.

(cite:girard11, 135)
#+END_QUOTE

The jiggering and exploring of various type systems is all in pursuit of an
ideal sweet spot that will let us prove everything we think we should be able to
while eliminating forms of expression that become unwieldy and undermine our
capacity to reason about the system at all. Type systems also provide an
important /interface/ abstracting over lambda terms. When we reason about terms
of type =int -> int= we can draw inferences about an infinite class of potential
functions while maintaining a birds eye view.

Does it make sense to look for types that range over patterns and structures
that hold between subtypes?

From the subtyping view, the addition of linear types expanded the class of
terms our types can provide an interface to, allowing new distinctions (maybe
also allowing terms untypeable in other systems into the domain?).

There are types correlating interfaces between systems of types. This is what
Goguen advocates in cite:Programming91typesas.

** A confusion regarding the Curry-Howard analogy

iiuc, $x : A \simeq x \in A \simeq x \: is \: an \: A$. This level of typing
judgment is required for a simply typed λ-calculus. But simply typed λ-calculus
is only analogous to /propsitional logic/, so how can we be predicating here?
This is what leads me to suspect type theory would be more easily understood as
an extension of [[https://en.wikipedia.org/wiki/Term_logic][term logic]].

** Type Theory as a Normative Discipline
This is merely an extension of the normative theory of logic.

Type Theory is a computational model constrained by a logical syntax.

#+BEGIN_QUOTE
Logical syntax can thus be seen both as a constructive tool, enabling the
formation of (normalizing) typed terms, and as a constraining one, imposing a
/custom/ on pure terms (and their socialization) in order to force termination.

(cite:abrusci14_transc)
#+END_QUOTE

*** TODO Extract Thread from Twitter



bibliography:../../../bibliography/references.bib
